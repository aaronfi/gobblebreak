
<div class="container" id="topContainer">
    <div class="col-sm-2">
        <div class="inputs">
            <div class="input-group">
                <span class="input-group-addon" id="size">Size</span>
                <input type="text" class="form-control" id="sizex" value="4" tabindex=1>
                <span class="input-group-addon">by</span>
                <input type="text" class="form-control" id="sizey" value="4" tabindex=2>
            </div>

            <div class="input-group">
                <span class="input-group-addon" id="size">Minimum word length</span>
                <input type="text" class="form-control" id="wordlen" value="3" tabindex=3>
            </div>

            <div class="input-group">
                <span class="input-group-addon" id="size">Timer</span>
                <input type="text" class="form-control" id="timer" value="3:00" tabindex=4>
            </div>

            <div class="input-group">
                <label class="c-input c-checkbox">
                    <input type="checkbox" id="autoreject">
                    <span class="c-indicator">Immediately reject bad guesses</span>
                </label>
            </div>

            <div class="input-group">
                <input id="ex1" data-slider-id='ex1Slider' type="text" data-slider-min="0" data-slider-max="20" data-slider-step="1" data-slider-value="14"/>
            </div>

            <div class="input-group">
                <button type="button" class="btn btn-primary btn-lg btn-block">Start</button>
            </div>
        </div>
    </div>

    <div class="col-sm-10">
        <div class="ui-content-widget ui-resizable" id="resizable">
            <div id="board" class="board"></div>
        </div>
    </div>
</div>

<script>
    $('#ex1').slider({
        formatter: function(value) {
            return value;
        }
    });

    var word = [];
    var swipeHandler = function() {
        $(function() {
            var isMouseDown = false;

            $('.square')
                .mousedown(function () {
                    isMouseDown = true;
                    $(this).addClass("highlighted");
                    word.push($(this).find('span').data('squareId'));
                    return false; // prevent text selection
                })
                .mouseover(function () {
                    if (isMouseDown && ! $(this).hasClass('highlighted')) {
                        $(this).addClass("highlighted");
                        word.push($(this).find('span').data('squareId'));
                    }
                })
                .bind("selectstart", function () {
                    return false;
                });

            $(document)
                .mouseup(function () {
                    isMouseDown = false;
                    game.submitWord(word);
                    word = [];
                    $('.square').removeClass('highlighted');
                    console.log(game.guesses);
                });
        });
    };

    var game = new Game();
    var shuffleBoard = function() {
        var x = $('#sizex').val();
        var y = $('#sizey').val();
        game.resize({ x: x, y: y });
        $('#board').html(game.toHtml());

        swipeHandler();
    };

    shuffleBoard();

    $('#board').html(game.toHtml());

    var incr_x = function() {
        $('#sizex').val(parseInt($('#sizex').val(), 10) + 1);
        shuffleBoard();
    };
    var decr_x = function() {
        $('#sizex').val(Math.max(1, parseInt($('#sizex').val(), 10) - 1));
        shuffleBoard();
    }
    var incr_y = function() {
        $('#sizey').val(parseInt($('#sizey').val(), 10) + 1);
        shuffleBoard();
    };
    var decr_y = function() {
        $('#sizey').val(Math.max(1, parseInt($('#sizey').val(), 10) - 1));
        shuffleBoard();
    }

    $('#sizex').bind('keydown', function(e) {
            switch (e.keyCode) {
                case 37:
                    e.preventDefault();
                    decr_y();
                    break;
                case 38:
                    e.preventDefault();
                    incr_x();
                    break;
                case 39:
                    e.preventDefault();
                    incr_y();
                    break;
                case 40:
                    e.preventDefault();
                    decr_x();
                    break;
                default:
            }
        });
    $('#sizex').change(shuffleBoard);

    $('#sizey').bind('keydown', function(e) {
            switch (e.keyCode) {
                case 37:
                    e.preventDefault();
                    decr_x();
                    break;
                case 38:
                    e.preventDefault();
                    incr_y();
                    break;
                case 39:
                    e.preventDefault();
                    incr_x();
                    break;
                case 40:
                    e.preventDefault();
                    decr_y();
                    break;
                default:
            }
        });
    $('#sizey').change(shuffleBoard);

    $('#resizable').resizable({
        start: function(event, ui) {
            $('#board').css({ 'border-color': 'blue' });
        },
        resize: function(event, ui) {
            $('#board').css({ 'border-color': 'blue' });

var old = game.size;
            game.size = ~~ Math.min(ui.size.height, ui.size.width) / Math.max(game.x, game.y);
console.log(ui.size.height + " " +ui.size.width + " " + old + " " + game.size);

            $(".square").css({
                'font-size': (game.size * 0.5) + 'px',
                'width': game.size + 'px',
                'height': game.size + 'px',
                'border-width': game.size < 45 ? '1px' : '1mm'
            });

            // for some reason, these two commands are necessary;  otherwise the resize triangle can end up misaligned.
            $('#resizable').css('height', '');
            $('#resizable').css('width', '');
        },
        stop: function(event, ui) {
            $('#board').css({ 'border-color': 'transparent' });
        },
        aspectRatio: true,
        handles: "nw, se"
    });

    $('#resizable .ui-icon-gripsmall-diagonal-se')
        .addClass('ui-icon-grip-diagonal-se')  // slight stylistic change, adding a better "click-drag" icon
        .removeClass('ui-icon-gripsmall-diagonal-se')
        .hover(
            function() {
                $('#board').css({ 'border-color': 'blue' });
                $('.ui-icon-gripsmall-diagonal-se').css({ 'border-color': 'blue' });
            },
            function() {
                $('#board').css({ 'border-color': 'transparent' });
                $('.ui-icon-gripsmall-diagonal-se').css({ 'border-color': 'transparent' });
            }
        )
        .mousedown(function() {
            $('#board').css({ 'border-color': 'blue' });
        })
        .mouseup(function() {
            $('#board').css({ 'border-color': 'transparent' });
        });

    $(window).load(function () {
        var e, t, n, i, r, o, s;
        r = $("#subheading");
        if (r.length > 0) {
            e = $('<span class="jqconsole-cursor user-color user_0"></span>');
            t = $('<span class="jqconsole-cursor user-color user_1"></span>');
            o = function (e, t, n) {
                var i;
                if (0 !== t.length) {
                    e.text(e.text() + t.charAt(0));
                    i = 40 + 40 * Math.random();  // x == min delay in ms;  y == random number weighting offset
                    return setTimeout(function () {
                                return o(e, t.slice(1), n);
                            }
                            , i);
                }
                n && n();
            };
            s = function (e, t, n) {
                if (0 !== t.length)
                    return o(e, t[0], function () {
                                var i;
                                i = $('<span class="text"/>').insertAfter(e);
                                return s(i, t.slice(1), n);
                            }
                    );
                n && n();
                return void 0;
            };
            n = $('<span class="text"/>');
            i = ["Blah blah blah", "blah blah"];
            r.empty().append(n).append(e);
            return s(n, i, function () {
                        return setTimeout(function () {
                                    var n;
                                    n = r.children().first();
                                    e.fadeOut();
                                    t.insertAfter(n);
                                    return setTimeout(function () {
                                                return o(n, " Not", function () {
                                                            // debugger;
                                                            return setTimeout(function () {
                                                                        t.detach();
                                                                        return setTimeout(function () {
                                                                                    return $(".jqconsole-cursor").fadeOut();
                                                                                }
                                                                                , 300);
                                                                    }
                                                                    , 100);
                                                        }
                                                )
                                            }
                                            , 100);
                                }
                                , 400);
                    }
            );
        }
    });
</script>