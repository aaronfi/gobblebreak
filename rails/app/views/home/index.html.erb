
<div class="container" id="topContainer">
    <div class="col-sm-2">
        <div class="inputs">
            <div class="input-group" id="sizexy" data-toggle="tooltip" data-placement="right" title="Use all four arrow keys to change the board">
                <span class="input-group-addon" id="size">Size</span>
                <input type="text" class="form-control" id="sizex" tabindex=1>
                <span class="input-group-addon">by</span>
                <input type="text" class="form-control" id="sizey" tabindex=2>
            </div>

            <div class="input-group min-max-words">
                <div class="input-group">
                    <span class="input-group-addon">At least</span>
                    <input type="text" class="form-control" id="minwords" tabindex=3>
                    <span class="input-group-addon">words</span>
                </div>
                <div class="input-group">
                    <span class="input-group-addon">At most</span>
                    <input type="text" class="form-control" id="maxwords" tabindex=4>
                    <span class="input-group-addon">words</span>
                </div>
            </div>

            <div class="input-group min-max-words-slider">
                <input id="minMaxWordsSlider" data-slider-id='minMaxWordsSlider' type="text" data-slider-min="0" data-slider-max="9999" data-slider-step="1" data-slider-value="0" />
            </div>

            <div class="input-group">
                <span class="input-group-addon" id="size">Minimum word length</span>
                <input type="text" class="form-control" id="minwordlength" tabindex=5>
            </div>


            <div class="input-group c-inputs-stacked">
                <label class="c-input c-checkbox">
                    <input id="showProgressBar" type="checkbox" checked>
                    <span class="c-indicator"></span>
                    Show progress bar
                </label>
                <label class="c-input c-checkbox">
                    <input id="showIncorrectGuesses" type="checkbox" checked>
                    <span class="c-indicator"></span>
                    Show incorrect guesses
                </label>
            </div>
        </div>
    </div>

    <div class="col-sm-8">
        <div class="ui-widget-content ui-resizable" id="resizable">

            <div class="container top-controls">
                <div class="row">
                    <div class="col-sm-3 col-sm-offset-1">
                        <button type="button" class="btn btn-secondary btn-lg" tabindex=6 id="shuffleButton" data-toggle="tooltip" data-placement="left" title="Hold space bar for repeated shuffling">Shuffle</button>
                        <button type="button" class="btn btn-primary btn-lg" tabindex=7 id="endButton">End</button>
                    </div>
                    <div class="col-sm-4">
                        <span class="centerBlock">
                            <div class="input-group">
                                <span class="input-group-addon">Timer</span>
                                <input type="text" class="form-control" id="timer" tabindex=6>
                            </div>
                        </span>
                    </div>
                    <div class="leftBlock">
                        <div class="col-sm-3 col-sm-offset-1">
                            <button type="button" class="btn btn-primary btn-lg col col-sm-2" id="startButton" tabindex=8 data-toggle="tooltip" data-placement="right" title="Hit enter to start, or just swipe your first word.">Start</button>
                            <button type="button" class="btn btn-primary btn-lg col col-sm-2" id="pauseButton" tabindex=9>Pause</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="draggable-arrow"><i class="fa fa-arrows"></i></div>

            <div id="board" class="board"></div>

            <div class="input-group word-completion-slider">
                <input id="wordCompletionSlider" data-slider-id='wordCompletionSlider' type='text' />
            </div>
        </div>
    </div>

    <div class="col-sm-2">
        <li class="list-group-item hidden" id="newGuess">
            <span class="label label-default label-pill pull-right"></span>
            <span></span>
        </li>

        <ul class="list-group" id="guesses" />
    </div>
</div>

<script>
    var game = new Game({ htmlAnchor: window.location.hash });

    //
    // helper functions
    //

    var parseClockSecondsToDisplay = function() {
        var min = Math.floor(game.clockSeconds / 60);
        var sec = game.clockSeconds - (min * 60);
        if (sec < 10) {
            sec = '0' + sec;
        }
        return min + ':' + sec;
    };
    var drawWordCompletionSlider = function() {
        var timer = setInterval(function() {
            if (wordCompletionSlider && game.answers[game.minWordLength]) {
                var numAnswers = game.answers[game.minWordLength].length;
                wordCompletionSlider
                    .slider('setValue', [game.correctGuesses.size, numAnswers])
                    .slider('setAttribute', 'max', numAnswers)
                    .slider('refresh');
                clearInterval(timer);
            }
        }, 250);

        $('#wordCompletionSlider').css({ 'height': $('#board').height() - 1.5*parseInt($("#board").css("margin-bottom")) });
    };
    var drawBoard = function() {
        $(".square").css({
            'font-size': (game.size * 0.5) + 'px',
            'width': game.size + 'px',
            'height': game.size + 'px',
            'border-width': game.size < 45 ? '1px' : '1mm'
        });
        $(".outer-square").css({
            'font-size': (game.size * 0.5) + 'px',
            'width': game.size + 'px',
            'height': game.size + 'px',
            'border-width': game.size < 45 ? '1px' : '1mm',
            'padding': (game.size * 0.2) + 'px'
        });

        drawWordCompletionSlider();

        // for some reason, these two commands are necessary;  otherwise the resize triangle can end up misaligned.
        $('#resizable').css('height', '');
        $('#resizable').css('width', '');

        window.location.hash = game.toHtmlAnchor();
    };
    var centerBoard = function() {
        $('#resizable').position({
            my: 'bottom',
            at: 'center',
            of: '#topContainer'
        }).css({'top': '0'});
    };
    var refreshBoard = function() {
        $('#board').html(game.toHtml());
        drawBoard();
        swipeHandler();
        window.location.hash = game.toHtmlAnchor();
    };
    var numShuffleAttempts = 0;
    var onShuffleBoardCallback = function() {
        numShuffleAttempts++;

        if (game.maxWords > 0 || game.minWords > 0) {
            if (numShuffleAttempts < 25) {
                var numAnswers = game.answers[game.minWordLength] ? game.answers[game.minWordLength].length : 0;

                if (numAnswers < game.minWords) {
                    var delta = game.minWords - numAnswers;
                    $('#stdout').text('Shuffle #' + numShuffleAttempts + ' failed, ' + delta + ' too few word' + (delta !== 1 ? 's' : ''));
                    shuffleBoard();
                } else if (game.maxWords > 0 && numAnswers > game.maxWords) {
                    var delta = numAnswers - game.maxWords;
                    $('#stdout').text('Shuffle #' + numShuffleAttempts + ' failed, ' + delta + ' too many word' + (delta !== 1 ? 's' : ''));
                    shuffleBoard();
                } else {
                    $('#stdout').text('');
                }
            } else {
                $('#stdout').text('Gave up after ' + numShuffleAttempts + ' shuffle attempts.  Try again, or relax your shuffle criteria.');
                numShuffleAttempts = 0;
            }
        } else {
            $('#stdout').text('');
            numShuffleAttempts = 0;
        }

        refreshBoard();
    };
    var minWordLengthCallback = function() {
        var minlength = $('#minwordlength').val();
        game.minWordLength = Number(minlength);
        refreshBoard();
        window.location.hash = game.toHtmlAnchor();
    };

    var endGame = function(delay) {
        clearInterval(interval);
        $('#timer').val('0:00');
        $('.square span').css('color', 'black');
        setTimeout(function () {
            $('#timer').val(originalClockValue);
            $('#timer').prop('disabled', false);
            $('#pauseButton').hide();
            $('#pauseButton').text('Pause');
            $('#endButton').hide();
            $('#shuffleButton').show();
            $('#startButton').show();
        }, delay);
        $('#stdout').text('Final score: ' + game.scoreGuesses());
        showMissedAnswers();
        isGameInProgress = false;
        isPaused = false;
    };
    var resetClock = function() {
        isGameInProgress = false;
        $('#timer').val(parseClockSecondsToDisplay());
        $('#pauseButton').hide();
        $('#endButton').hide();
        $('#shuffleButton').show();
        $('#startButton').show();
    };

    var shuffleBoard = function() {
        var x = $('#sizex').val();
        var y = $('#sizey').val();
        if (x !== game.x || y !== game.y) {
            game.resize({ x: x, y: y, onShuffleBoardCallback: onShuffleBoardCallback });
            refreshBoard();
            drawWordCompletionSlider();
            resetClock();
        }
        $('#guesses').empty().removeClass('final-reveal');
    };
    var swipeHandler = function() {
        $(function() {
            var isMouseDown = false;
            var prevId;

            $('.outer-square')
                .mousedown(function() {
                    if (isPaused) return;
                    isMouseDown = true;
                    if (!isGameInProgress) {
                        $('#startButton').click();  // auto-start the game upon first swiped word
                    }
                    $(this).addClass('highlighted-starting-letter visited');
                    var id = $(this).find('span').data('squareId');
                    word.push(id);
                    prevId = id;

                    $('#stdout').text(game.letters[id] === '.' ? 'qu' : game.letters[id]);
                    return false;  // prevent text selection
                });

            $('.square').mouseover(function(e) {
                    if (isPaused) return;
                    var id = $(this).find('span').data('squareId');
                    if (isMouseDown) {
                        if ($(this).parent().hasClass('visited')) {
                            if (id === word[word.length - 2]) {  // undo move
                                var mostRecentMove = word.pop();
                                var mostRecentMoveId = '#sq' + mostRecentMove;
                                $(mostRecentMoveId).parent().parent().parent().removeClass('visited highlighted');
                                $('#stdout').text( $('#stdout').text().slice(0, -1) );
                                prevId = word[word.length - 1];
                            }
                        } else if (game.board[prevId].indexOf(id) !== -1) {
                                $(this).parent().addClass('highlighted visited');
                                word.push(id);
                                prevId = id;
                                $('#stdout').append( game.letters[id] );
                        }
                    }
                })
                .bind("selectstart", function() {
                    return false;
                });

            $(document)
                .mouseup(function() {
                    if (isPaused) return;
                    isMouseDown = false;

                    if (isGameInProgress) {  // make sure a word-drag that started before the timer expired, but didn't conclude until after the timer expired, is not alloewd in as a socre
                        if (word.length >= game.minWordLength) {
                            var results = game.submitWord(word);
                            var formedWord = results[0];
                            var resultCode = results[1];

                            if (formedWord && resultCode !== ':duplicate' && resultCode !== ':impossible') {
                                var newGuess = $('#newGuess').clone(false);
                                newGuess.removeAttr('id');

                                if (resultCode === ':correct') {
                                    newGuess.addClass('correct-guess').find('span:first-child').text(game.scoreGuess(formedWord));
                                    newGuess.addClass('flash-lightgreen');
                                    newGuess.removeClass('hidden');
                                } else {
                                    if ($('#showIncorrectGuesses').prop('checked')) {
                                        newGuess.removeClass('hidden');
                                        newGuess.addClass('flash-lightgray');
                                    };
                                    newGuess.addClass('incorrect-guess');
                                }
                                newGuess.find('span:last-child').text(formedWord);
                                newGuess.prependTo('#guesses');

                                setTimeout(function () {
                                    newGuess.removeClass('flash-lightgreen flash-lightgray');
                                }, 3000);
                            }

                            var numAnswers = game.answers[game.minWordLength] ? game.answers[game.minWordLength].length : 0;
                            wordCompletionSlider.slider('setValue', [game.correctGuesses.size, numAnswers]);
                        } else if (word.length > 1) {
                            $('#minwordlength').addClass('flash-red');
                            $('#minwordlength').prev().addClass('flash-red');
                            setTimeout(function () {
                                $('#minwordlength').removeClass('flash-red');
                                $('#minwordlength').prev().removeClass('flash-red');
                            }, 750);
                        }
                    }

                    $('.outer-square').removeClass('highlighted highlighted-starting-letter visited');
                    word = [];
                });
        });
    };

    //
    // init Game object and then render it
    //

    var word = [];
    $('#board').html(game.toHtml());
    swipeHandler();
    drawBoard();
    centerBoard();

    $('#sizex').val(game.x);
    $('#sizey').val(game.y);
    $('#minwords').val(game.minWords);
    $('#maxwords').val(game.maxWords === 0 ? 'any' : game.maxWords);
    $('#minwordlength').val(game.minWordLength);
    $('#timer').val(parseClockSecondsToDisplay());

    //
    // snazzy keyboard controls
    //

    var incr_x = function() {
        $('#sizex').val(parseInt($('#sizex').val(), 10) + 1);
        shuffleBoard();
    };
    var decr_x = function() {
        $('#sizex').val(Math.max(1, parseInt($('#sizex').val(), 10) - 1));
        shuffleBoard();
    }
    var incr_y = function() {
        $('#sizey').val(parseInt($('#sizey').val(), 10) + 1);
        shuffleBoard();
    };
    var decr_y = function() {
        $('#sizey').val(Math.max(1, parseInt($('#sizey').val(), 10) - 1));
        shuffleBoard();
    }

    // global key binding
    $(window).bind('keydown', function(e) {
        switch (e.keyCode) {
            case 13:  // enter key
                e.preventDefault();
                if (!isGameInProgress) {
                    $('#startButton').click();  // auto-start game upon first move
                }
                e.stopPropagation();
                break;
            case 32:  // space bar
                e.preventDefault();
                shuffleBoard();
                e.stopPropagation();
                break;
            case 37:
                e.preventDefault();
                decr_x();
                shuffleBoard();
                centerBoard();
                e.stopPropagation();
                break;
            case 38:
                e.preventDefault();
                decr_y();
                shuffleBoard();
                centerBoard();
                e.stopPropagation();
                break;
            case 39:
                e.preventDefault();
                incr_x();
                shuffleBoard();
                centerBoard();
                e.stopPropagation();
                break;
            case 40:
                e.preventDefault();
                incr_y();
                shuffleBoard();
                centerBoard();
                e.stopPropagation();
                break;
            default:
                break;
        }
    });

    // board size input fields -- up/down arrows only
    $('#sizex').bind('keydown', function(e) {
            switch (e.keyCode) {
                case 13:  // enter key
                case 32:  // space bar
                case 37:
                case 39:
                    e.preventDefault();
                    e.stopPropagation();
                    break;
                case 38:
                    e.preventDefault();
                    incr_x();
                    e.stopPropagation();
                    break;
                case 40:
                    e.preventDefault();
                    decr_x();
                    e.stopPropagation();
                    break;
                default:
                    break;
            }
        });
    $('#sizex').change(function() {
        shuffleBoard();
        centerBoard();
    });
    $('#sizey').bind('keydown', function(e) {
            switch (e.keyCode) {
                case 13:  // enter key
                case 32:  // space bar
                case 37:
                case 39:
                    e.preventDefault();
                    e.stopPropagation();
                    break;
                case 38:
                    e.preventDefault();
                    incr_y();
                    e.stopPropagation();
                    break;
                case 40:
                    e.preventDefault();
                    decr_y();
                    e.stopPropagation();
                    break;
                default:
                    break;
            }
        });
    $('#sizey').change(function() {
        shuffleBoard();
        centerBoard();
    });

    // min/max words slider and input fields -- up/down arrows only
    var isSliding = false;
    var minMaxWordsSlider_maxValue = 1000;
    var minMaxWordsSlider = $('#minMaxWordsSlider')
        .slider({
            min: 0,
            max: minMaxWordsSlider_maxValue,
            range: true,
            tooltip: 'hide',
            value: [game.minWords, game.maxWords === 0 ? minMaxWordsSlider_maxValue : game.maxWords]
        }).on('slide', function(e) {
            $('#minwords').val(e.value[0]);
            $('#maxwords').val(e.value[1] === minMaxWordsSlider_maxValue ? 'any' : e.value[1]);
        }).on('slideStart', function() {
            isSliding = true;
        }).on('slideStop', function() {
            isSliding = false;
            game.minWords = Number($('#minwords').val());
            var max = $('#maxwords').val();
            game.maxWords = max === 'any' ? 0 : Number(max);
            window.location.hash = game.toHtmlAnchor();
        });

    $('#minwords').change(function() {
        if (!isSliding) {
            var min = Number($(this).val());
            var max = Number($('#maxwords').val());
            if (min > max) {
                var temp = min;
                min = max;
                max = temp;
                $('#minwords').val(min);
                $('#maxwords').val(max);
            }
            minMaxWordsSlider.slider('setValue', [min, max]);
            game.minWords = Number($('#minwords').val());
            var max = $('#maxwords').val();
            game.maxWords = max === 'any' ? 0 : Number(max);
            window.location.hash = game.toHtmlAnchor();
        }
    });
    $('#maxwords').change(function() {
        if (!isSliding) {
            var min = Number($('#minwords').val());
            var max = Number($(this).val());
            if (max === minMaxWordsSlider_maxValue) {
                $('#maxwords').val('any');
            } else if (min > max) {
                var temp = min;
                min = max;
                max = temp;
                $('#minwords').val(min);
                $('#maxwords').val(max);
            }
            minMaxWordsSlider.slider('setValue', [min, max]);
            game.minWords = Number($('#minwords').val());
            var max = $('#maxwords').val();
            game.maxWords = max === 'any' ? 0 : Number(max);
            window.location.hash = game.toHtmlAnchor();
        }
    });
    var decr_min = function() {
        var min = Math.max(0, parseInt($('#minwords').val(), 10) - 1);
        var max = Number($('#maxwords').val());
        $('#minwords').val(min);
        minMaxWordsSlider.slider('setValue', [min, max]);
    }
    var incr_min = function() {
        var min = Math.max(0, parseInt($('#minwords').val(), 10) + 1);
        var max = Number($('#maxwords').val());
        $('#minwords').val(min);
        minMaxWordsSlider.slider('setValue', [min, max]);
    }
    var decr_max = function() {
        var min = Number($('#minwords').val());
        var max = Math.max(0, parseInt($('#maxwords').val(), 10) - 1);
        $('#maxwords').val(max);
        minMaxWordsSlider.slider('setValue', [min, max]);
    }
    var incr_max = function() {
        var min = Number($('#minwords').val());
        var max = Math.max(0, parseInt($('#maxwords').val(), 10) + 1);
        $('#maxwords').val(max);
        minMaxWordsSlider.slider('setValue', [min, max]);
    }
    $('#minwords').bind('keydown', function(e) {
        switch (e.keyCode) {
            case 13:  // enter key
            case 32:  // space bar
            case 37:
            case 39:
                e.preventDefault();
                e.stopPropagation();
                break;
            case 38:
                e.preventDefault();
                incr_min();
                e.stopPropagation();
                break;
            case 40:
                e.preventDefault();
                decr_min();
                e.stopPropagation();
                break;
            default:
                break;
        }
    });
    $('#maxwords').bind('keydown', function(e) {
        switch (e.keyCode) {
            case 13:  // enter key
            case 32:  // space bar
            case 37:
            case 39:
                e.preventDefault();
                e.stopPropagation();
                break;
            case 38:
                e.preventDefault();
                incr_max();
                e.stopPropagation();
                break;
            case 40:
                e.preventDefault();
                decr_max();
                e.stopPropagation();
                break;
            default:
                break;
        }
    });

    //minwordlength input
    var decr_minlength = function() {
        var minlength = Math.max(2, parseInt($('#minwordlength').val(), 10) - 1);
        $('#minwordlength').val(minlength);
        minWordLengthCallback();
    }
    var incr_minlength = function() {
        var minlength = Math.max(2, parseInt($('#minwordlength').val(), 10) + 1);
        $('#minwordlength').val(minlength);
        minWordLengthCallback();
    }
    $('#minwordlength').bind('keydown', function(e) {
        switch (e.keyCode) {
            case 13:  // enter key
            case 32:  // space bar
            case 37:
            case 39:
                e.preventDefault();
                e.stopPropagation();
                break;
            case 38:
                e.preventDefault();
                incr_minlength();
                e.stopPropagation();
                break;
            case 40:
                e.preventDefault();
                decr_minlength();
                e.stopPropagation();
                break;
            default:
                break;
        }
    });
    $('#minwordlength').change(minWordLengthCallback);

    $('#timer').bind('keydown', function(e) {
        switch (e.keyCode) {
            case 13:  // enter key
            case 32:  // space bar
            case 37:
            case 39:
            case 38:
            case 40:
                e.stopPropagation();
                break;
            default:
                break;
        }
    });

    $('#startButton').bind('keydown', function(e) {
        switch (e.keyCode) {
            case 13:  // enter key
            case 32:  // space bar
                e.stopPropagation();
                break;
            default:
                break;
        }
    });

    // game progression bar
    var wordCompletionSlider = $('#wordCompletionSlider').slider({
            min: 0,
            max: -1,
            value: 0,
            range: true,
            tooltip: 'always',
            reversed: true,
            orientation: 'vertical',
            step: 1,
            enabled : false,
            tooltip_split: true,
            formatter: function(value) {
                var result = value;
                if (result > 999) {
                    var thousands = Math.floor(result / 1000);
                    result = thousands + ',' + (result - (thousands * 1000));
                }
                if (game.answers[game.minWordLength]) {
                    result += ' word';
                    if (value !== 1) {
                        result += 's';
                    }
                    if (value === game.answers[game.minWordLength].length) {
                        result += ' total';
                    } else {
                        result += ' found, ';
                        var score = game.scoreGuesses();
                        result += score + ' point';
                        if (score !== 1) {
                            result += 's';
                        }
                    }
                }
                return result;
            }
        });
    drawWordCompletionSlider();

    $('#showProgressBar').change(function() {
        if (this.checked) {
            $('#wordCompletionSlider').css({ 'z-index': '' });
        } else {
            $('#wordCompletionSlider').css({ 'z-index': '-10' });
        }
    });

    $('#showIncorrectGuesses').change(function() {
        if (this.checked) {
            $('.incorrect-guess').fadeTo("fast", 1.00, function() {
                $(this).slideDown("slow", function() {
                    $(this).show();
                })
            });
        } else {
            $('.incorrect-guess').fadeTo("fast", 0.00, function() {
                $(this).slideUp("fast", function() {
                    $(this).hide();
                });
            });
        }
    });

    // Shuffle button
    $('#shuffleButton').click(function() {
        shuffleBoard();
        $('#shuffleButton').tooltip('hide');
    });
    $('#shuffleButton').tooltip();

    $('#sizexy').tooltip();

    $('#timer').change(function() {
        game.clockSeconds = Number( parseTimer() );
        $('#timer').val( parseClockSecondsToDisplay() );
        window.location.hash = game.toHtmlAnchor();
    });

    //
    // game clock
    //
    var showMissedAnswers = function() {
        game.missedAnswers().forEach(function(answer) {
            var missedAnswer = $('#newGuess').clone(false);
            missedAnswer.removeAttr('id');
            missedAnswer.removeClass('hidden');
            missedAnswer.find('span:first-child').text(game.scoreGuess(answer));
            missedAnswer.find('span:last-child').text(answer);
            $('#guesses').append(missedAnswer);
        });

        $('#guesses li').detach().sort(function(a,b) {
            var a_text = $(a).find('span:last-child').text();
            var b_text = $(b).find('span:last-child').text();
            if (a_text.length !== b_text.length) {
                return b_text.length - a_text.length;
            } else {
                return $(a).find('span:last-child').text().localeCompare($(b).find('span:last-child').text());
            }
        }).appendTo('#guesses');
        $('#guesses').addClass('final-reveal');
    };
    var interval, originalClockValue;
    var startTimer = function(duration, display) {
        originalClockValue = $('#timer').val();

        var timer = (function(start) {
            return function () {
                // get the number of seconds that have elapsed since startTimer() was called
                var diff = duration - (((Date.now() - start) / 1000) | 0);

                // does the same job as parseInt truncates the float
                var minutes = (diff / 60) | 0;
                var seconds = (diff % 60) | 0;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                display.val(minutes + ":" + seconds);

                if (diff <= 0) {  // game has ended...
                    endGame(1500);
                }
            }
        })(Date.now());

        interval = setInterval(timer, 1000);
    };
    var parseTimer = function() {
        var val = $('#timer').val();
        if (val.indexOf(':') !== -1) {
            var parts = val.split(':');
            return Number(parts[0])*60 + Number(parts[1]);
        } else {
            return Number(val);
        }
    };

    // Start/Pause/End buttons
    var isGameInProgress = false;
    $('#startButton').tooltip();
    $('#startButton').click(function() {
        $('#startButton').tooltip('hide');

        if (!isGameInProgress) {
            $('#guesses').empty();
            isGameInProgress = true;
            $('#shuffleButton').hide();
            $('#startButton').hide();
            $('#pauseButton').show();
            $('#endButton').show();
            $('#timer').prop('disabled', true);
            $('#timer').addClass('flash-green');
            $('#timer').prev().addClass('flash-green');
            setTimeout(function () {
                $('#timer').removeClass('flash-green');
                $('#timer').prev().removeClass('flash-green');
            }, 5000);
            startTimer(parseTimer(), $('#timer'));
        }
    });

    var isPaused = false;
    $('#pauseButton').click(function() {
        if (isPaused) {
            isPaused = false;
            $('.square span').css('color', 'black');
            $('#pauseButton').text('Pause');
            startTimer(parseTimer(), $('#timer'));
        } else {
            isPaused = true;
            $('.square span').css('color', 'transparent');
            $('#pauseButton').text('Resume');
            clearInterval(interval);
        }
    });

    $('#endButton').click(function() {
        endGame(0);
    });

    //
    // initialize board resizing
    //

    $('#resizable').resizable({
        start: function(event, ui) {
            $('#board').css({ 'border-color': 'blue' });
            $('.resizable-arrow i').css({ 'color': 'blue' });
        },
        resize: function(event, ui) {
            $('#board').css({ 'border-color': 'blue' });
            $('.resizable-arrow i').css({ 'color': 'blue' });

            game.size = Math.round(Math.min(ui.size.height, ui.size.width) / (1.7 * Math.max(game.x, game.y)));
            drawBoard();
        },
        stop: function(event, ui) {
            $('#board').css({ 'border-color': 'transparent' });
            $('.resizable-arrow i').css({ 'color': 'white' });
            window.location.hash = game.toHtmlAnchor();
        },
        aspectRatio: true,
        handles: "nw, se"
    });
    $('#resizable .ui-icon-gripsmall-diagonal-se')
        .addClass('resizable-arrow')  // slight stylistic change, adding a better "click-drag" icon
        .removeClass('ui-icon-gripsmall-diagonal-se ui-resizable-handle ui-resizable-se ui-icon')
        .append('<i class="fa fa-arrows-alt"></i>');
    $('#resizable .fa-arrows-alt')
        .hover(
            function() {
                $('#board').css({ 'border-color': 'blue' });
                $(this).css({ 'color': 'blue' });
            },
            function() {
                $('#board').css({ 'border-color': 'transparent' });
                $(this).css({ 'color': 'white' });
            }
        )
        .mousedown(function() {
            $('#board').css({ 'border-color': 'blue' });
            $(this).css({ 'color': 'blue' });
        })
        .mouseup(function() {
            $('#board').css({ 'border-color': 'transparent' });
            $(this).css({ 'color': 'white' });
        });

    //
    // initialize board dragging
    //

    $('#resizable').draggable({
        handle: 'i.fa-arrows',
        zIndex: 100,
        // containment: '#topContainer',
        start: function() {
            $('#board').css({ 'border-color': 'green' });
            $('#board i').css({ 'color': 'green' });
        },
        stop: function() {
            $('#board').css({ 'border-color': 'transparent' });
            $('#board i').css({ 'color': 'white' });
        }
    });
    $('#resizable .fa-arrows')
        .hover(
            function() {
                $('#board').css({ 'border-color': 'green' });
                $(this).css({ 'color': 'green' });
            },
            function() {
                $('#board').css({ 'border-color': 'transparent' });
                $(this).css({ 'color': 'white' });
            }
        );

    //
    // marquee welcoming text
    //

    var e;
    $(window).load(function() {
        var t, n, i, p, r, o, s;
        r = $("#subheading");
        if (r.length > 0) {
            e = $('<span class="jqconsole-cursor user-color user_0"></span>');
            t = $('<span class="jqconsole-cursor user-color user_1"></span>');
            o = function(e, t, n) {
                var i;
                if (0 !== t.length) {
                    e.text(e.text() + t.charAt(0));
                    i = 40 + 40 * Math.random();  // x == min delay in ms;  y == random number weighting offset
                    return setTimeout(function() {
                        return o(e, t.slice(1), n);
                    }, i);
                }
                n && n();
            };
            p = function() {
                var currSpan = e.parent().find('span[class="text"]:not(:last)').last();

                if (currSpan.length > 0) {
                    if (currSpan.text().length === 0) {
                        currSpan.remove();
                    } else {
                        currSpan.text(currSpan.text().slice(0, -1));
                    }

                    i = 15 + 5 * Math.random();  // x == min delay in ms;  y == random number weighting offset
                    return setTimeout(function() {
                        return p();
                    }, i);
                }
            };
            s = function (e, t, n) {
                if (0 !== t.length) {
                    return o(e, t[0], function() {
                        var i = $('<span class="text" id="stdout" />').insertAfter(e);
                        return s(i, t.slice(1), n);
                    });
                }
                n && n();
                return void 0;
            };

            n = $('<span class="text" />');
            i = ["Fancy a ", "game,  you turkey?"];

            r.append(n).append(e);
            $(".jqconsole-cursor").fadeIn();

            return setTimeout(function() {
                return s(n, i, function () {
                    return setTimeout(function () {
                        var n = r.children().first();

                        t.insertAfter(n);
                        return setTimeout(function () {
                            return o(n, " most lexical ", function () {
                                return setTimeout(function () {
                                    t.detach();
                                    return setTimeout(function () {
                                        $(".jqconsole-cursor").fadeIn();
                                        return setTimeout(function () {
                                            p();
                                        }, 4000);
                                    }, 300);
                                }, 100);
                            });
                        }, 100);
                    }, 400);
                });
            }, 1100);
        }

        $(window).focus();
    });
</script>