
<div class="container" id="topContainer">
    <div class="col-sm-2">
        <div class="inputs">
            <div class="input-group">
                <span class="input-group-addon" id="size">Size</span>
                <input type="text" class="form-control" id="sizex" value="4" tabindex=1>
                <span class="input-group-addon">by</span>
                <input type="text" class="form-control" id="sizey" value="4" tabindex=2>
            </div>

            <div class="input-group">
                <span class="input-group-addon" id="size">Minimum word length</span>
                <input type="text" class="form-control" id="wordlen" value="3" tabindex=3>
            </div>

            <div class="input-group">
                <span class="input-group-addon" id="size">Timer</span>
                <input type="text" class="form-control" id="timer" value="3:00" tabindex=4>
            </div>

            <div class="input-group">
                <label class="c-input c-checkbox">
                    <input type="checkbox" id="autoreject">
                    <span class="c-indicator">Immediately reject bad guesses</span>
                </label>
            </div>

            <div class="input-group">
                <input id="ex1" data-slider-id='ex1Slider' type="text" data-slider-min="0" data-slider-max="20" data-slider-step="1" data-slider-value="14"/>
            </div>

            <div class="input-group">
                <button type="button" class="btn btn-primary btn-lg btn-block">Start</button>
            </div>
        </div>
    </div>

    <div class="col-sm-10">
        <div class="ui-widget-content ui-resizable" id="resizable">
            <div class="draggable-arrow"><i class="fa fa-arrows"></i></div>
            <div id="board" class="board"></div>
        </div>
    </div>
</div>

<script>
    $('#ex1').slider({
        formatter: function(value) {
            return value;
        }
    });

    var word = [];

    var swipeHandler = function() {
        $(function() {
            var isMouseDown = false;
            var prevId;

            $('.square')
                .mousedown(function() {
                    isMouseDown = true;
                    $(this).parent().addClass('highlighted');
                    $(this).addClass('highlighted');
                    $(this).css('border-color', 'lightblue');
                    $(this).parent().css('border-color', 'green');
                    var id = $(this).find('span').data('squareId');
                    word.push(id);
                    prevId = id;

                    $('#stdout').text(game.letters[id]);
                    return false;  // prevent text selection
                })
                .mouseover(function(e) {
                    var id = $(this).find('span').data('squareId');
                    if (isMouseDown) {
                        if ($(this).hasClass('highlighted')) {
                            if (id === word[word.length - 2]) {  // undo move
                                var mostRecentMove = word.pop();
                                var mostRecentMoveId = '#sq' + mostRecentMove;
                                $(mostRecentMoveId).parent().parent().parent().removeClass('highlighted');
                                $(mostRecentMoveId).parent().parent().removeClass('highlighted');
                                $(mostRecentMoveId).parent().parent().css('border-color', 'white');

                                $('#stdout').text( $('#stdout').text().slice(0, -1) );
                                prevId = word[word.length - 1];
                            }
                        } else if (game.board[prevId].indexOf(id) !== -1) {
                                $(this).parent().addClass('highlighted');
                                $(this).addClass('highlighted');
                                $(this).css('border-color', 'lightblue');
                                word.push(id);
                                prevId = id;
                                $('#stdout').append( game.letters[id] );
                        }
                    } else if (! $(this).hasClass('highlighted')) {
                        // TODO add temporary yellow color
                    }
                })
                .bind("selectstart", function() {
                    return false;
                });

            $(document)
                .mouseup(function() {
                    isMouseDown = false;
                    game.submitWord(word);
                    word = [];
                    $('.outer-square').removeClass('highlighted');
                    $('.outer-square').css('border-color', 'black');
                    $('.square').removeClass('highlighted');
                    $('.square').css('border-color', 'white');
                });
        });
    };

    var game = new Game();
    game.size = 35;
    var shuffleBoard = function() {
        var x = $('#sizex').val();
        var y = $('#sizey').val();
        game.resize({ x: x, y: y });
        $('#board').html(game.toHtml());

        swipeHandler();
    };

    shuffleBoard();

    $('#board').html(game.toHtml());
    $('#resizable').position({
        my: 'bottom',
        at: 'center',
        of: '#topContainer'
    }).css({ 'top': '0' });

    var incr_x = function() {
        $('#sizex').val(parseInt($('#sizex').val(), 10) + 1);
        shuffleBoard();
    };
    var decr_x = function() {
        $('#sizex').val(Math.max(1, parseInt($('#sizex').val(), 10) - 1));
        shuffleBoard();
    }
    var incr_y = function() {
        $('#sizey').val(parseInt($('#sizey').val(), 10) + 1);
        shuffleBoard();
    };
    var decr_y = function() {
        $('#sizey').val(Math.max(1, parseInt($('#sizey').val(), 10) - 1));
        shuffleBoard();
    }

    $('#sizex').bind('keydown', function(e) {
            switch (e.keyCode) {
                case 37:
                    e.preventDefault();
                    decr_y();
                    break;
                case 38:
                    e.preventDefault();
                    incr_x();
                    break;
                case 39:
                    e.preventDefault();
                    incr_y();
                    break;
                case 40:
                    e.preventDefault();
                    decr_x();
                    break;
                default:
            }
        });
    $('#sizex').change(shuffleBoard);

    $('#sizey').bind('keydown', function(e) {
            switch (e.keyCode) {
                case 37:
                    e.preventDefault();
                    decr_x();
                    break;
                case 38:
                    e.preventDefault();
                    incr_y();
                    break;
                case 39:
                    e.preventDefault();
                    incr_x();
                    break;
                case 40:
                    e.preventDefault();
                    decr_y();
                    break;
                default:
            }
        });
    $('#sizey').change(shuffleBoard);

    $('#resizable').resizable({
        start: function(event, ui) {
            $('#board').css({ 'border-color': 'blue' });
        },
        resize: function(event, ui) {
            $('#board').css({ 'border-color': 'blue' });

var old = game.size;
            game.size = ~~ Math.min(ui.size.height, ui.size.width) / (1.7 * Math.max(game.x, game.y));
console.log(ui.size.height + " " +ui.size.width + " " + old + " " + game.size);

            $(".square").css({
                'font-size': (game.size * 0.5) + 'px',
                'width': game.size + 'px',
                'height': game.size + 'px',
                'border-width': game.size < 45 ? '1px' : '1mm'
            });
            $(".outer-square").css({
                'font-size': (game.size * 0.5) + 'px',
                'width': game.size + 'px',
                'height': game.size + 'px',
                'border-width': game.size < 45 ? '1px' : '1mm',
                'padding': (game.size * 0.2) + 'px'
            });

            // for some reason, these two commands are necessary;  otherwise the resize triangle can end up misaligned.
            $('#resizable').css('height', '');
            $('#resizable').css('width', '');
        },
        stop: function(event, ui) {
            $('#board').css({ 'border-color': 'transparent' });
        },
        aspectRatio: true,
        handles: "nw, se"
    });

    $('#resizable .ui-icon-gripsmall-diagonal-se')
        .addClass('resizable-arrow')  // slight stylistic change, adding a better "click-drag" icon
        .removeClass('ui-icon-gripsmall-diagonal-se ui-resizable-handle ui-resizable-se ui-icon')
        .append('<i class="fa fa-arrows-alt"></i>');

    $('#resizable .fa-arrows-alt')
        .hover(
            function() {
                $('#board').css({ 'border-color': 'blue' });
                $(this).css({ 'color': 'blue' });
            },
            function() {
                $('#board').css({ 'border-color': 'transparent' });
                $(this).css({ 'color': 'white' });
            }
        )
        .mousedown(function() {
            $('#board').css({ 'border-color': 'blue' });
            $(this).css({ 'color': 'blue' });
        })
        .mouseup(function() {
            $('#board').css({ 'border-color': 'transparent' });
            $(this).css({ 'color': 'white' });
        });

    $('#resizable').draggable({
        handle: 'i.fa-arrows',
        zIndex: 100,
        // containment: '#topContainer',
        start: function() {
            $('#board').css({ 'border-color': 'green' });
            $('#board i').css({ 'color': 'green' });
        },
        stop: function() {
            $('#board').css({ 'border-color': 'transparent' });
            $('#board i').css({ 'color': 'white' });
        }
    });
    $('#resizable .fa-arrows')
        .hover(
            function() {
                $('#board').css({ 'border-color': 'green' });
                $(this).css({ 'color': 'green' });
            },
            function() {
                $('#board').css({ 'border-color': 'transparent' });
                $(this).css({ 'color': 'white' });
            }
        );




    var e;
    $(window).load(function() {
        var t, n, i, p, r, o, s;
        r = $("#subheading");
        if (r.length > 0) {
            e = $('<span class="jqconsole-cursor user-color user_0"></span>');
            t = $('<span class="jqconsole-cursor user-color user_1"></span>');
            o = function(e, t, n) {
                var i;
                if (0 !== t.length) {
                    e.text(e.text() + t.charAt(0));
                    i = 40 + 40 * Math.random();  // x == min delay in ms;  y == random number weighting offset
                    return setTimeout(function() {
                        return o(e, t.slice(1), n);
                    }, i);
                }
                n && n();
            };
            p = function() {
                var currSpan = e.parent().find('span[class="text"]:not(:last)').last();

                if (currSpan.length > 0) {
                    if (currSpan.text().length === 0) {
                        currSpan.remove();
                    } else {
                        currSpan.text(currSpan.text().slice(0, -1));
                    }

                    i = 15 + 5 * Math.random();  // x == min delay in ms;  y == random number weighting offset
                    return setTimeout(function() {
                        return p();
                    }, i);
                }
            };
            s = function (e, t, n) {
                if (0 !== t.length) {
                    return o(e, t[0], function() {
                        var i = $('<span class="text" id="stdout" />').insertAfter(e);
                        return s(i, t.slice(1), n);
                    });
                }
                n && n();
                return void 0;
            };

            n = $('<span class="text" />');
            i = ["Fancy a ", "game?"];

            r.append(n).append(e);
            $(".jqconsole-cursor").fadeIn();

            return setTimeout(function() {
                return s(n, i, function () {
                    return setTimeout(function () {
                        var n = r.children().first();

                        t.insertAfter(n);
                        return setTimeout(function () {
                            return o(n, " most lexical ", function () {
                                return setTimeout(function () {
                                    t.detach();
                                    return setTimeout(function () {
                                        $(".jqconsole-cursor").fadeIn();
                                        return setTimeout(function () {
                                            p();
                                        }, 2500);
                                    }, 300);
                                }, 100);
                            });
                        }, 100);
                    }, 400);
                });
            }, 1100);
        }
    });
</script>